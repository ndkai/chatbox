import 'dart:async';
import 'package:chat_demo/text_animation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';

void main() => runApp(const ChatGPTMockApp());

class ChatGPTMockApp extends StatelessWidget {
  const ChatGPTMockApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "ChatGPT Mock Demo",
      debugShowCheckedModeBanner: false,
      theme: ThemeData.light(),
      home: const ChatGPTMockPage(),
    );
  }
}

class ChatGPTMockPage extends StatefulWidget {
  const ChatGPTMockPage({super.key});

  @override
  State<ChatGPTMockPage> createState() => _ChatGPTMockPageState();
}

class _ChatGPTMockPageState extends State<ChatGPTMockPage> {
  final List<ChatMessage> _messages = [];
  final TextEditingController _input = TextEditingController();
  final ScrollController _scroll = ScrollController();

  void _sendMessage(String text) {
    if (text.trim().isEmpty) return;
    setState(() {
      _messages.add(ChatMessage(role: "user", text: text));
    });
    _input.clear();
    _mockAIResponse(text);
  }

  /// üîπ Gi·∫£ l·∫≠p ph·∫£n h·ªìi c·ªßa ChatGPT (stream t·ª´ng chunk)
  void _mockAIResponse(String question) {
    final streamCtrl = StreamController<String>();
    final message = ChatMessage(role: "assistant", stream: streamCtrl);
    setState(() => _messages.add(message));

    // üîπ N·ªôi dung markdown d√†i (~1000 t·ª´)
    final fullText = """
# üçº C√°c lo·∫°i s·ªØa t·ªët nh·∫•t hi·ªán nay (2025)

Xin ch√†o! D∆∞·ªõi ƒë√¢y l√† **ph√¢n t√≠ch chi ti·∫øt v√† to√†n di·ªán** v·ªÅ c√°c lo·∫°i s·ªØa b·ªôt, s·ªØa c√¥ng th·ª©c t·ªët nh·∫•t tr√™n th·ªã tr∆∞·ªùng Vi·ªát Nam hi·ªán nay.  
M√¨nh s·∫Ω gi√∫p b·∫°n hi·ªÉu r√µ v·ªÅ **th√†nh ph·∫ßn dinh d∆∞·ª°ng**, **∆∞u ƒëi·ªÉm t·ª´ng th∆∞∆°ng hi·ªáu**, v√† **g·ª£i √Ω l·ª±a ch·ªçn ph√π h·ª£p** nh·∫•t cho b√©.

---

## üß≠ Ti√™u ch√≠ ƒë√°nh gi√° ‚Äús·ªØa t·ªët‚Äù
M·ªôt lo·∫°i s·ªØa ƒë∆∞·ª£c coi l√† ‚Äút·ªët‚Äù kh√¥ng ch·ªâ v√¨ th∆∞∆°ng hi·ªáu m√† c√≤n v√¨:

1. **Ph√π h·ª£p ƒë·ªô tu·ªïi**  
   M·ªói giai ƒëo·∫°n ph√°t tri·ªÉn c·ªßa b√© c·∫ßn t·ª∑ l·ªá ƒë·∫°m, ch·∫•t b√©o v√† vi ch·∫•t kh√°c nhau.  
   - 0‚Äì6 th√°ng: t·∫≠p trung DHA, ƒë·∫°m whey, ch·∫•t b√©o MCT.  
   - 6‚Äì12 th√°ng: th√™m ch·∫•t x∆° FOS, canxi, s·∫Øt, vitamin D.  
   - Tr√™n 1 tu·ªïi: b·ªï sung th√™m nƒÉng l∆∞·ª£ng, vitamin A, k·∫Ωm, omega 3‚Äì6.

2. **C√¥ng th·ª©c d·ªÖ ti√™u h√≥a**  
   M·ªôt s·ªØa t·ªët c·∫ßn h·ªó tr·ª£ ti√™u h√≥a, h·∫•p thu t·ªët v√† **√≠t g√¢y t√°o b√≥n**.  
   C√°c th√†nh ph·∫ßn nh∆∞ **GOS, FOS, HMO, Probiotic, Prebiotic** l√† d·∫•u hi·ªáu t·ªët.

3. **Ngu·ªìn g·ªëc r√µ r√†ng, an to√†n**  
   ∆Øu ti√™n s·ªØa **nh·∫≠p kh·∫©u ch√≠nh h√£ng ho·∫∑c s·∫£n xu·∫•t n·ªôi ƒë·ªãa c√≥ ch·ª©ng nh·∫≠n ISO, HACCP, GMP**.  
   Tr√°nh s·ªØa x√°ch tay tr√¥i n·ªïi, kh√¥ng nh√£n ph·ª• ti·∫øng Vi·ªát.

---

## üß© Top 5 th∆∞∆°ng hi·ªáu s·ªØa n·ªïi b·∫≠t

### 1. **Meiji ‚Äì Nh·∫≠t B·∫£n**
- Meiji Infant (0‚Äì12M) v√† Meiji Step (1‚Äì3 tu·ªïi) l√† 2 d√≤ng ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t.  
- V·ªã s·ªØa nh·∫°t, d·ªÖ u·ªëng, c√¥ng th·ª©c ‚Äúm√°t‚Äù, √≠t g√¢y t√°o b√≥n.  
- Ch·ª©a DHA, ARA, taurine, nucleotides, vitamin v√† kho√°ng ch·∫•t ƒë·∫ßy ƒë·ªß.  
- **∆Øu ƒëi·ªÉm:** R·∫•t ‚Äúhi·ªÅn‚Äù v·ªõi h·ªá ti√™u h√≥a, h·ª£p v·ªõi th·ªÉ tr·∫°ng tr·∫ª ch√¢u √Å.  
- **Nh∆∞·ª£c ƒëi·ªÉm:** Gi√° cao, c·∫ßn mua ƒë√∫ng h√†ng ch√≠nh h√£ng.

---

### 2. **Similac / Abbott ‚Äì M·ªπ**
- D√≤ng **Similac 5G** ho·∫∑c **Similac IQ Plus HMO** n·ªïi b·∫≠t nh·ªù b·ªï sung **2'-FL HMO**, gi√∫p tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch t·ª± nhi√™n.  
- Ngo√†i ra, Abbott c√≥ c√°c d√≤ng ƒë·∫∑c bi·ªát nh∆∞ *Similac Total Comfort* (d·ªÖ ti√™u h√≥a) v√† *Similac GainPlus* (tƒÉng c√¢n).  
- **∆Øu ƒëi·ªÉm:** C√¥ng ngh·ªá ti√™n ti·∫øn, nghi√™n c·ª©u khoa h·ªçc l√¢u nƒÉm.  
- **Nh∆∞·ª£c ƒëi·ªÉm:** Gi√° th√†nh cao, v·ªã h∆°i ng·ªçt.

---

### 3. **Friso Gold ‚Äì H√† Lan**
- C√¥ng ngh·ªá **LockNutri‚Ñ¢** gi·ªØ tr·ªçn v·∫πn d∆∞·ª°ng ch·∫•t t·ª± nhi√™n c·ªßa s·ªØa t∆∞∆°i.  
- Ch·ª©a **Synbiotic (Probiotic + Prebiotic)** gi√∫p h·ªá ti√™u h√≥a kh·ªèe m·∫°nh.  
- V·ªã s·ªØa thanh, d·ªÖ h√≤a tan, b√© d·ªÖ l√†m quen.  
- **∆Øu ƒëi·ªÉm:** Gi√∫p b√© ti√™u h√≥a t·ªët, hi·∫øm khi b·ªã t√°o b√≥n.  
- **Nh∆∞·ª£c ƒëi·ªÉm:** Kh√¥ng ph√π h·ª£p v·ªõi tr·∫ª d·ªã ·ª©ng ƒë·∫°m b√≤.

---

### 4. **Vinamilk ‚Äì Vi·ªát Nam**
- C√°c d√≤ng n·ªïi b·∫≠t: **Optimum Gold**, **Dielac Alpha**, **Colosbaby**.  
- TƒÉng c∆∞·ªùng kh√°ng th·ªÉ IgG, b·ªï sung DHA, ARA, lysine v√† ch·∫•t x∆° h√≤a tan.  
- **∆Øu ƒëi·ªÉm:** Gi√° h·ª£p l√Ω, ph√π h·ª£p th·ªÉ tr·∫°ng tr·∫ª Vi·ªát, d·ªÖ mua.  
- **Nh∆∞·ª£c ƒëi·ªÉm:** Ch∆∞a c√≥ nhi·ªÅu phi√™n b·∫£n chuy√™n bi·ªát (v√≠ d·ª•: kh√¥ng lactose, ƒë·∫°m th·ªßy ph√¢n).

V√≠ d·ª• c√¥ng th·ª©c s·ªØa Vinamilk Optimum Gold:
""";
    final responses = fullText.split(" ");
    int i = 0;
    Timer.periodic(const Duration(milliseconds: 500), (t) {
      if (i < fullText.length) {
        streamCtrl.add(responses[i]);
        i++;
        _scrollToBottom();
      } else {
        t.cancel();
        streamCtrl.close();
      }
    });
}



  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scroll.hasClients) {
        _scroll.animateTo(
          _scroll.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text("ChatGPT Mock", style: TextStyle(color: Colors.black)),
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scroll,
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              itemCount: _messages.length,
              itemBuilder: (context, i) {
                final msg = _messages[i];
                final isUser = msg.role == "user";
                return Align(
                  alignment:
                  isUser ? Alignment.centerRight : Alignment.centerLeft,
                  child: Container(
                    margin: const EdgeInsets.symmetric(vertical: 6),
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: isUser ? Colors.blue[50] : Colors.grey[100],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    constraints: BoxConstraints(
                        maxWidth: MediaQuery.of(context).size.width * 0.9),
                    child: isUser
                        ? Text(msg.text,
                        style: const TextStyle(fontSize: 15, color: Colors.black))
                        : MarkdownFadingStreamer(
                      tokenStream: msg.stream!.stream,
                      fadeDuration: const Duration(milliseconds: 400),
                      chunkDebounce: const Duration(milliseconds: 150),
                    ),
                  ),
                );
              },
            ),
          ),
          _buildInputBar(),
        ],
      ),
    );
  }

  Widget _buildInputBar() {
    return SafeArea(
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        color: Colors.white,
        child: Row(
          children: [
            Expanded(
              child: TextField(
                controller: _input,
                decoration: InputDecoration(
                  hintText: "Nh·∫≠p c√¢u h·ªèi...",
                  fillColor: Colors.grey[100],
                  filled: true,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(25),
                    borderSide: BorderSide.none,
                  ),
                  contentPadding:
                  const EdgeInsets.symmetric(horizontal: 18, vertical: 12),
                ),
              ),
            ),
            const SizedBox(width: 8),
            InkWell(
              onTap: () => _sendMessage(_input.text),
              borderRadius: BorderRadius.circular(30),
              child: Container(
                padding: const EdgeInsets.all(10),
                decoration: const BoxDecoration(
                  color: Colors.black,
                  shape: BoxShape.circle,
                ),
                child: const Icon(Icons.send, color: Colors.white, size: 18),
              ),
            )
          ],
        ),
      ),
    );
  }
}

/// ------------------------------------------------------------
/// Chat message model
/// ------------------------------------------------------------
class ChatMessage {
  final String role; // "user" or "assistant"
  final String text;
  final StreamController<String>? stream;
  ChatMessage({required this.role, this.text = "", this.stream});
}

/// ------------------------------------------------------------
/// Markdown fading streamer widget
/// ------------------------------------------------------------
// class MarkdownFadingStreamer extends StatefulWidget {
//   final Stream<String> tokenStream;
//   final Duration fadeDuration;
//   final Duration chunkDebounce;
//
//   const MarkdownFadingStreamer({
//     super.key,
//     required this.tokenStream,
//     this.fadeDuration = const Duration(milliseconds: 250),
//     this.chunkDebounce = const Duration(milliseconds: 100),
//   });
//
//   @override
//   State<MarkdownFadingStreamer> createState() => _MarkdownFadingStreamerState();
// }
//
// class _MarkdownFadingStreamerState extends State<MarkdownFadingStreamer>
//     with TickerProviderStateMixin {
//   late final StreamSubscription<String> _sub;
//   final StringBuffer _stable = StringBuffer();
//   final StringBuffer _pending = StringBuffer();
//   String _animating = '';
//
//   late final AnimationController _fadeCtrl;
//   late final Animation<double> _fadeAnim;
//   Timer? _debounce;
//
//   @override
//   void initState() {
//     super.initState();
//     _fadeCtrl = AnimationController(vsync: this, duration: widget.fadeDuration);
//     _fadeAnim = CurvedAnimation(parent: _fadeCtrl, curve: Curves.easeInOut);
//
//     _sub = widget.tokenStream.listen((token) {
//       _pending.write(token);
//       _debounce?.cancel();
//       _debounce = Timer(widget.chunkDebounce, _flushPending);
//     });
//   }
//
//   void _flushPending() {
//     if (_pending.isEmpty) return;
//     setState(() {
//       _animating = _pending.toString();
//       _pending.clear();
//     });
//
//     _fadeCtrl.forward(from: 0).whenComplete(() {
//       setState(() {
//         _stable.write(_animating);
//         _animating = '';
//       });
//     });
//   }
//
//   @override
//   void dispose() {
//     _sub.cancel();
//     _fadeCtrl.dispose();
//     _debounce?.cancel();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return AnimatedBuilder(
//       animation: _fadeAnim,
//       builder: (context, _) {
//         final visibleText = _stable.toString() +
//             (_animating.isNotEmpty ? _animating : '');
//         return Opacity(
//           opacity: _fadeAnim.value,
//           child: MarkdownBody(
//             data: visibleText,
//             styleSheet:
//             MarkdownStyleSheet.fromTheme(Theme.of(context)).copyWith(
//               p: const TextStyle(fontSize: 15, height: 1.4),
//               codeblockDecoration: BoxDecoration(
//                 color: Colors.grey[200],
//                 borderRadius: BorderRadius.circular(8),
//               ),
//             ),
//           ),
//         );
//       },
//     );
//   }
// }
